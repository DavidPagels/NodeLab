// Generated by CoffeeScript 1.7.1

/*
  NodeCoffeeScriptLab
  Programmers: David Pagels and Dillon Stenberg
 */

(function() {
  var assert, firstTwo, lastTwo, lessThree, notTenTwenty, onFive, rewrite, sliceArr, splatTest, spliceArrs, sumArr, sumUpTo, tryFive;

  assert = require('assert');

  sumArr = require('./intro').sumArr;

  sumUpTo = require('./intro').sumUpTo;

  spliceArrs = require('./intro').spliceArrs;

  sliceArr = require('./intro').sliceArr;

  firstTwo = require('./intro').firstTwo;

  lastTwo = require('./intro').lastTwo;

  lessThree = require('./intro').lessThree;

  notTenTwenty = require('./intro').notTenTwenty;

  onFive = require('./intro').onFive;

  tryFive = require('./intro').tryFive;

  rewrite = require('./intro').rewrite;

  splatTest = require('./intro').splatTest;

  describe("testing for loop", function() {
    var arr, arr2;
    arr = [1, 2, 3, 4, 5, 6, 19];
    arr2 = [1, 1, 1];
    it("should sum to 40", function() {
      return assert.equal(sumArr(arr), 40);
    });
    return it("should sum to 3", function() {
      return assert.equal(sumArr(arr2), 3);
    });
  });

  describe("testing other for loop function with slicing", function() {
    var arr;
    arr = [1, 2, 1, 9, 12, 452, 1, 3, 1000000000];
    return it("should return 17", function() {
      return assert.equal(sumUpTo(arr, 4), 13);
    });
  });

  describe("array splicing", function() {
    var arr1, arr2;
    arr1 = [1, 2, 3, 4, 5, 6];
    arr2 = [15, 16];
    it("should return [1, 2, 15, 16, 5, 6]", function() {
      return assert.deepEqual(spliceArrs(arr1, arr2, 2, 2), [1, 2, 15, 16, 5, 6]);
    });
    return it("should return [1, 2, 15, 16, 15, 16]", function() {
      return assert.deepEqual(spliceArrs(spliceArrs(arr1, arr2, 2, 2), arr2, 4, 2), [1, 2, 15, 16, 15, 16]);
    });
  });

  describe("another array slicing", function() {
    var arr;
    arr = [2, 3, 4, 5, 8, 9];
    return it("should return [2, 3, 8, 9]", function() {
      return assert.deepEqual(sliceArr(arr, 2, 4), [2, 3, 8, 9]);
    });
  });

  describe("first two and last two test", function() {
    var arr;
    arr = [1, 2, 3, 4, 5, 6, 7, 8];
    it("should return [1, 2]", function() {
      return assert.deepEqual(firstTwo(arr), [1, 2]);
    });
    return it("should return [7, 8]", function() {
      return assert.deepEqual(lastTwo(arr), [7, 8]);
    });
  });

  describe("is less than three", function() {
    return it("less than three", function() {
      return assert.equal(lessThree(2), true);
    });
  });

  describe("not between 10 and 20", function() {
    return it("between 10 and 20", function() {
      return assert.equal(notTenTwenty(15), false);
    });
  });

  describe("on and less than 5", function() {
    return it("should evaluate to true", function() {
      return assert.equal(onFive(true, 2), true);
    });
  });

  describe("tryFive", function() {
    it("should give us 5", function() {
      return assert.equal(tryFive(), 5);
    });
    it("should give us 3", function() {
      return assert.equal(tryFive(3), 3);
    });
    return it("should return -2", function() {
      return assert.equal(tryFive(-2), -2);
    });
  });

  describe("rewriting test", function() {
    it("should give us 2", function() {
      return assert.equal(rewrite(2), 2);
    });
    it("should give us 4", function() {
      return assert.equal(rewrite(4), 4);
    });
    return it("should give us 8", function() {
      return assert.equal(rewrite(8), 8);
    });
  });

  describe("testing splats", function() {
    it("should return the variables", function() {
      return assert.deepEqual(splatTest(1, 2, 3, 6), [1, 2, 3, 6]);
    });
    it("should do the same", function() {
      return assert.deepEqual(splatTest(1, 2, 3, 4, 5, 6), [1, 2, 3, 4, 5, 6]);
    });
    return it("should do the same again", function() {
      return assert.deepEqual(splatTest(1), [1]);
    });
  });

}).call(this);

//# sourceMappingURL=Testing.map
